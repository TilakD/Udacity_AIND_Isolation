{
    "critiques": {
        "680": {
            "rubric_items": {
                "5510": {
                    "result": "failed",
                    "observation": "{\"15. Submission includes research_review.pdf\": {\"traceback\": \"AssertionError: False is not true : You must submit a report named research_review.pdf for review.\\n\"}, \"13. Test output interface of custom_score_3()\": {\"traceback\": \"Traceback (most recent call last):\\n  File \\\"/home/vmuser_sbewxazy/workspace/game_agent.py\\\", line 90, in custom_score_3\\n    raise NotImplementedError\\nNotImplementedError\\n\"}, \"10. Test that AlphaBetaPlayer successfully plays a full game\": {\"traceback\": \"Traceback (most recent call last):\\nNotImplementedError\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nAssertionError: Your agent raised an error while attempting to play a complete game against another agent.  Make sure that your agent can play an entire game -- including selecting initial moves on an empty board.\\nException: \\n\"}, \"14. Submission includes heuristic_analysis.pdf\": {\"traceback\": \"AssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.\\n\"}, \"6. Test the interface of AlphaBetaPlayer.get_move()\": {\"traceback\": \"Traceback (most recent call last):\\n  File \\\"/home/vmuser_sbewxazy/workspace/game_agent.py\\\", line 293, in get_move\\n    raise NotImplementedError\\nNotImplementedError\\n\"}, \"5. Test interface of AlphaBetaPlayer.alphabeta()\": {\"traceback\": \"AssertionError: False is not true : The alphabeta method should return a tuple containing board coordinates (x, y). The coordinates should be integers, but the tuple returned by your method contained [<class 'float'>, <class 'tuple'>]\\n\"}, \"2. Test functionality of MinimaxPlayer.minimax()\": {\"traceback\": \"AssertionError: False is not true : Your MinimaxAgent.minimax function returned a move that was not one of the optimal moves for the given heurisitc. \\nAvailable choices:\\n[(6, 8)]\\nYour Selection:\\n(1.0, (6, 8))\\n\\nTest Case Details:\\n------------------\\nHeuristic: open_move_score\\nDepth limit: 1\\nInitial Board State:\\n     0   1   2   3   4   5   6   7   8\\n\\r0  |   |   |   |   |   | - |   |   |   | \\n\\r1  |   |   |   | 2 |   |   |   |   |   | \\n\\r2  |   |   | - |   | - | - | - |   |   | \\n\\r3  |   |   | - | - | - | - | - |   |   | \\n\\r4  |   |   |   |   | - | - | - | - |   | \\n\\r5  |   |   |   |   | - | - | - | - |   | \\n\\r6  |   |   | - | - | - | - | - | - |   | \\n\\r7  |   |   |   |   | - | - |   |   |   | \\n\\r8  |   |   |   |   |   |   |   | 1 |   | \\n\\r\\ngame._board_state:\\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 71]\\n\\n\"}, \"9. Test iterative deepening in AlphaBetaPlayer.get_move()\": {\"traceback\": \"Traceback (most recent call last):\\n  File \\\"/home/vmuser_sbewxazy/workspace/game_agent.py\\\", line 293, in get_move\\n    raise NotImplementedError\\nNotImplementedError\\n\"}, \"7. Test functionality of AlphaBetaPlayer.alphabeta()\": {\"traceback\": \"AssertionError: False is not true : Your AlphaBetaAgent.alphabeta function returned a move that was not one of the optimal moves for the given heurisitc.\\nAvailable choices:\\n[(3, 6)]\\nYour Selection: (6.0, (3, 6))\\n\\nTest Case Details:\\n------------------\\nHeuristic: open_move_score\\nDepth limit: 1\\nInitial Board State:\\n     0   1   2   3   4   5   6   7   8\\n\\r0  |   |   |   |   |   |   |   |   |   | \\n\\r1  |   |   |   |   |   |   |   |   |   | \\n\\r2  |   |   | - | - |   | - |   |   |   | \\n\\r3  |   |   |   | - | - | - |   |   |   | \\n\\r4  |   |   | - | - | - | - | - | - |   | \\n\\r5  |   |   |   |   |   | 1 | - |   |   | \\n\\r6  |   |   | - |   | - | - | - | - |   | \\n\\r7  |   |   |   |   | 2 |   |   |   |   | \\n\\r8  |   |   |   |   |   |   |   |   |   | \\n\\r\\ngame._board_state:\\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 50]\\n\\n\"}, \"11. Test output interface of custom_score()\": {\"traceback\": \"Traceback (most recent call last):\\n  File \\\"/home/vmuser_sbewxazy/workspace/game_agent.py\\\", line 38, in custom_score\\n    raise NotImplementedError\\nNotImplementedError\\n\"}, \"3. Test that minimax() raises SearchTimeout when the timer expires\": {\"traceback\": \"AssertionError: False is not true : The minimax method should return a tuple containing board coordinates (x, y). The coordinates should be integers, but the tuple returned by your method contained [<class 'float'>, <class 'tuple'>]\\n\"}, \"12. Test output interface of custom_score_2()\": {\"traceback\": \"Traceback (most recent call last):\\n  File \\\"/home/vmuser_sbewxazy/workspace/game_agent.py\\\", line 64, in custom_score_2\\n    raise NotImplementedError\\nNotImplementedError\\n\"}}"
                }
            }
        }
    }
}